clear

% filterDesigner

% 3.1 reading audio file
% sampleAudio is the audio itself, sampleRate is the rate of the sample

[sampleAudio,sampleRate] = audioread('Regular_Speech_M.mp3');

% 3.2 changing from stereo to mono if necessary
% size() function returns matrix dimensions of sampleAudio, if 2 wide then
% both channels are added together to make audio mono

inputSize = size(sampleAudio);
if(inputSize(1,2) == 2)
    sampleAudio = [sum(sampleAudio(:,1:2),2)];
end

% 3.3 playing sound in matlab

sound = audioplayer(sampleAudio, sampleRate);
play(sound);

% 3.4 writing sound to new file

filename = 'audiofile.wav';
audiowrite(filename,sampleAudio,sampleRate)

% 3.5 plotting the sound waveform as function of its sample number

sampleNumVector = linspace(1, inputSize(1), inputSize(1));
figure;
plot(sampleNumVector,sampleAudio);
xlabel('Sample Number');
ylabel('Signal Amplitude')

% 3.6 resampling to 16kHz if necessary

if(sampleRate ~= 16000)
    sampleAudio = resample(sampleAudio,16000,sampleRate);
end

% 3.7 generating cos wave
% Here we take into account the resampling to 16 kHz, and then create a new
% timeInterval for the cos function. We input the 1 kHz frequency and
% generate the cos function, then determine the number of steps that it
% will take to complete two cycles and resize the data to match before
% plotting

% adjustedInputSize = size(sampleAudio);
% timeInterval = linspace(0,adjustedInputSize(1,1)/16000, adjustedInputSize(1,1));
% freq = 1000;
% data = cos(2*pi*freq*timeInterval)';
% intervalOfCos = 1/freq;
% sizeOfInterval = timeInterval(1,2);
% numSteps = round(2*(intervalOfCos/sizeOfInterval)+1);
% timeInterval = timeInterval(1:numSteps);
% data = data(1:numSteps);
% figure;
% plot(timeInterval,data);
% xlabel('Sample Number');
% ylabel('Signal Amplitude');
% sound = audioplayer(data,16000);
% play(sound);



filterMaker = filterDesign(sampleAudio, 10);


function filterMaker = filterDesign(audio, N)
    disp()
    lowerBound = 100;
    upperBound = 8000;
    channelVals = linspace(lowerBound,upperBound, N+1);
    channelSounds = zeros(N, length(audio));

    for channel = 1:N
        Hd = butterworth(channelVals(channel),channelVals(channel+1));

        filtered = filter(Hd,audio);

        channelSounds(channel, :) = transpose(filtered);
    end

    filterMaker = channelSounds;
end

function Hd = butterworth(lowerChannelBound, upperChannelBound)
%PRACTICE_FILTER Returns a discrete-time filter object.

% MATLAB Code
% Generated by MATLAB(R) 9.12 and Signal Processing Toolbox 9.0.
% Generated on: 10-Jul-2022 15:33:53

% Butterworth Bandpass filter designed using FDESIGN.BANDPASS.

% All frequency values are in Hz.
Fs = 16000;  % Sampling Frequency

order   = 10;    % Order
Fc1 = lowerChannelBound;   % First Cutoff Frequency
Fc2 = upperChannelBound;  % Second Cutoff Frequency

% Construct an FDESIGN object and call its BUTTER method.
h  = fdesign.bandpass('N,F3dB1,F3dB2', order, Fc1, Fc2, Fs);
Hd = design(h, 'butter');

% [EOF]

end

